#include "chip.h"
#include "MPU6050.h"
#include "I2C_MPU.h"

void Write_MPU (uint8_t registro, uint8_t escritura)
{
	I2C_WriteByte(ADDRESS_MPU, registro, escritura);
}

void ReadByte_MPU (uint8_t registro, uint8_t *puntero)
{
	I2C_ReadByte(ADDRESS_MPU, registro, puntero);
}

void Read_MPU (uint8_t registro, uint8_t *puntero, uint8_t cantidad)
{
	I2C_Read(ADDRESS_MPU, registro, puntero , cantidad);
}

void MPU6050_wakeup()
{
	Write_MPU(MPU6050_RA_PWR_MGMT_1, 0);	//Sleep=0;
	Write_MPU(MPU6050_RA_PWR_MGMT_2, 0);	//Saco de standby los ejes del acc y gyro
}

void registers_setup_MPU6050(void)
{
	I2C_XFER_T xfer;
	uint8_t rbuf[1]={0};
	uint8_t wbuf1[] = {
			MPU6050_RA_SELF_TEST_X,//first register (self_text_x)
		    0,0,0,0 //self test registers
		    ,0 // 00000000   /sampling rate setting, 1kHz/(0+1)=1kHz
		    ,1 // 00 000 001 / xx [extsync] [dlfp] / digital LPF setting, 1kHz-184Hz band Accel & 1kHz-188Hz band Gyro
		    ,0 // 000 00 000 / [STx][y][z] [FS] 000 / gyro scale setting, 250deg/s
		    ,0 // 000 00 000/ [STx][y][z] [FS] 000 / acc scale setting, 2g
		    //MOT_THR queda igual como viene default, no lo uso
		    // FIFO setting, hago que guarde en la fifo todos los bytes de los registros de gyro y accel
			,78//0 111 1 000 [temp][gyro x][y][z] [accxyz] [slv2][1][0] / FIFO mask
			,2 // 0 0 000 010 / - [FIFOen] [I2CMST][I2CDIS]- [FIFOreset][I2CMSTrst][SIGreset] / I2C Master Reset
	};
	uint8_t wbuf2[] = {MPU6050_RA_USER_CTRL,0x40}; ///0 1 000 000 / - [FIFOen] [I2CMST][I2CDIS]- [FIFOreset][I2CMSTrst][SIGreset] / Enable FIFO

	I2C_XFER_config(&xfer, rbuf, 0, ADDRESS_MPU, 0, wbuf1, (int) sizeof(wbuf1)/sizeof(uint8_t));
	I2C_XFER_config(&xfer, rbuf, 0, ADDRESS_MPU, 0, wbuf2, (int) sizeof(wbuf2)/sizeof(uint8_t));
}

/*
 * Esta funcion setea todos los registros que necesito para leer datos de la FIFO
 * Y FUNCIONA
 */
void reg_set_regs_inet(void)
{
	I2C_XFER_T xfer;//CHECK
	uint8_t rbuf[]={0,0};//CHECK
	uint8_t * fifo_count_data = NULL;
	uint8_t wbuf[]={0};//CHECK
	uint16_t packet_count, fifo_count, i=0;

	// reset device, reset all registers, clear gyro and accelerometer bias registers
	I2C_WriteByte(ADDRESS_MPU, PWR_MGMT_1, 0x80); 	// Write a one to bit 7 reset bit; toggle reset device
	Delay(100);										//El valor por defecto del registro luego del reset es el 0x40

	//CHECK
	wbuf[0]=MPU6050_RA_PWR_MGMT_1;
	I2C_XFER_config(&xfer, rbuf, 2, ADDRESS_MPU, 0, wbuf, 1);

	// get stable time source
	// Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
	I2C_WriteByte(ADDRESS_MPU, PWR_MGMT_1, 0x01);
	I2C_WriteByte(ADDRESS_MPU, PWR_MGMT_2, 0x00);
	Delay(200);

	// Configure device for bias calculation
	I2C_WriteByte(ADDRESS_MPU, INT_ENABLE, 0x00);   // Disable all interrupts
	I2C_WriteByte(ADDRESS_MPU, FIFO_EN, 0x00);      // Disable FIFO
	I2C_WriteByte(ADDRESS_MPU, PWR_MGMT_1, 0x00);   // Turn on internal clock source
	I2C_WriteByte(ADDRESS_MPU, I2C_MST_CTRL, 0x00); // Disable I2C master
	I2C_WriteByte(ADDRESS_MPU, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
	I2C_WriteByte(ADDRESS_MPU, USER_CTRL, 0x0C);    // Reset FIFO and DMP
	Delay(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	I2C_WriteByte(ADDRESS_MPU, CONFIG, 0x01);      	// Set low-pass filter to 188 Hz
	I2C_WriteByte(ADDRESS_MPU, SMPLRT_DIV, 0x00);  	// Set sample rate to 1 kHz
	I2C_WriteByte(ADDRESS_MPU, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
	I2C_WriteByte(ADDRESS_MPU, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity


	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	I2C_WriteByte(ADDRESS_MPU, USER_CTRL, 0x40);   // Enable FIFO
	I2C_WriteByte(ADDRESS_MPU, FIFO_EN, 0xF8);     // Enable gyro and accelerometer sensors for FIFO  (max size 1024 bytes in MPU-6050)


	//Ahora puedo leer los datos que estan en la FIFO
}

/*
 * La idea de que mdata sea ** es que se guarden directamente
 * en la estructura que se creo en el main los datos de la FIFO que se lean
 */
char Read_FIFO(uint8_t samples_cant, uint8_t* readbuff )
{
	uint16_t fifo_count=0; //packet_count=0;

	//TODO: Por que sucede esto a partir del 39????
	//Delay(80); // accumulate 80 samples in 80 milliseconds = 960 bytes (FUNCIONA Y DEVUELVE 80 SAMPLES)
	//Delay(39); // accumulate 80 samples in 80 milliseconds = 960 bytes (A PARTIR DE ESTE PUNTO PARA ABAJO TOMA 1 SAMPLE MENOS)
	if(samples_cant<39) //HOTFIX VILLERO
	{
		Delay(samples_cant+1);
	}
	else
	{
		Delay(samples_cant);
	}

	fifo_count = FIFO_Count();
	//packet_count = fifo_count/12;

	if(samples_cant <= fifo_count)
		Read_MPU(MPU6050_RA_FIFO_R_W, readbuff, samples_cant); //Lectura de muestras requeridas
	else
		return 0;

	return 1;
}

/*
 * Devuelve la cantidad de bytes que se
 * almacenaron en la fifo
 */
uint16_t FIFO_Count(void)
{
	uint8_t rbuf[2]={0,0};
	uint16_t count=0;

	Read_MPU(MPU6050_RA_FIFO_COUNTH, &rbuf[0], 2);
	count = rbuf[0];
	count = (count << 8) | rbuf[1];

	return count;
}

void MPU_ReadAccel (uint8_t *rbuf)
{
	Read_MPU(MPU6050_RA_ACCEL, rbuf, 6);
}

void MPU_ReadTemp (uint8_t *rbuf)
{
	Read_MPU(MPU6050_RA_TEMP, rbuf, 2);
}

void MPU_ReadGyro (uint8_t *rbuf)
{
	Read_MPU(MPU6050_RA_GYRO, rbuf, 6);
}

void Delay (unsigned long tick) //FunciÃ³n Delay
{
   unsigned long systickcnt;

   systickcnt = SysTickCnt;
   while ((SysTickCnt - systickcnt) < tick);
}
